// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: token.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TokenGreeterClient is the client API for TokenGreeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TokenGreeterClient interface {
	Generate(ctx context.Context, in *TokenGenerateRequest, opts ...grpc.CallOption) (*TokenGenerateResult, error)
	Destroy(ctx context.Context, in *TokenDestroyRequest, opts ...grpc.CallOption) (*StatusResult, error)
	Parse(ctx context.Context, in *TokenParseRequest, opts ...grpc.CallOption) (*TokenParseResult, error)
}

type tokenGreeterClient struct {
	cc grpc.ClientConnInterface
}

func NewTokenGreeterClient(cc grpc.ClientConnInterface) TokenGreeterClient {
	return &tokenGreeterClient{cc}
}

func (c *tokenGreeterClient) Generate(ctx context.Context, in *TokenGenerateRequest, opts ...grpc.CallOption) (*TokenGenerateResult, error) {
	out := new(TokenGenerateResult)
	err := c.cc.Invoke(ctx, "/tokenPB.TokenGreeter/Generate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenGreeterClient) Destroy(ctx context.Context, in *TokenDestroyRequest, opts ...grpc.CallOption) (*StatusResult, error) {
	out := new(StatusResult)
	err := c.cc.Invoke(ctx, "/tokenPB.TokenGreeter/Destroy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenGreeterClient) Parse(ctx context.Context, in *TokenParseRequest, opts ...grpc.CallOption) (*TokenParseResult, error) {
	out := new(TokenParseResult)
	err := c.cc.Invoke(ctx, "/tokenPB.TokenGreeter/Parse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenGreeterServer is the server API for TokenGreeter service.
// All implementations must embed UnimplementedTokenGreeterServer
// for forward compatibility
type TokenGreeterServer interface {
	Generate(context.Context, *TokenGenerateRequest) (*TokenGenerateResult, error)
	Destroy(context.Context, *TokenDestroyRequest) (*StatusResult, error)
	Parse(context.Context, *TokenParseRequest) (*TokenParseResult, error)
	mustEmbedUnimplementedTokenGreeterServer()
}

// UnimplementedTokenGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedTokenGreeterServer struct {
}

func (UnimplementedTokenGreeterServer) Generate(context.Context, *TokenGenerateRequest) (*TokenGenerateResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Generate not implemented")
}
func (UnimplementedTokenGreeterServer) Destroy(context.Context, *TokenDestroyRequest) (*StatusResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedTokenGreeterServer) Parse(context.Context, *TokenParseRequest) (*TokenParseResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Parse not implemented")
}
func (UnimplementedTokenGreeterServer) mustEmbedUnimplementedTokenGreeterServer() {}

// UnsafeTokenGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TokenGreeterServer will
// result in compilation errors.
type UnsafeTokenGreeterServer interface {
	mustEmbedUnimplementedTokenGreeterServer()
}

func RegisterTokenGreeterServer(s grpc.ServiceRegistrar, srv TokenGreeterServer) {
	s.RegisterService(&TokenGreeter_ServiceDesc, srv)
}

func _TokenGreeter_Generate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenGenerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenGreeterServer).Generate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tokenPB.TokenGreeter/Generate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenGreeterServer).Generate(ctx, req.(*TokenGenerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenGreeter_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenGreeterServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tokenPB.TokenGreeter/Destroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenGreeterServer).Destroy(ctx, req.(*TokenDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenGreeter_Parse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenParseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenGreeterServer).Parse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tokenPB.TokenGreeter/Parse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenGreeterServer).Parse(ctx, req.(*TokenParseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TokenGreeter_ServiceDesc is the grpc.ServiceDesc for TokenGreeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TokenGreeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tokenPB.TokenGreeter",
	HandlerType: (*TokenGreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Generate",
			Handler:    _TokenGreeter_Generate_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _TokenGreeter_Destroy_Handler,
		},
		{
			MethodName: "Parse",
			Handler:    _TokenGreeter_Parse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "token.proto",
}
