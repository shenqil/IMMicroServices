// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: captcha.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CaptchaGreeterClient is the client API for CaptchaGreeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CaptchaGreeterClient interface {
	Get(ctx context.Context, in *CaptchaGetRequest, opts ...grpc.CallOption) (*CaptchaGetResult, error)
	Generate(ctx context.Context, in *CaptchaGenerateRequest, opts ...grpc.CallOption) (*CaptchaGenerateResult, error)
	Verify(ctx context.Context, in *CaptchaVerifyRequest, opts ...grpc.CallOption) (*StatusResult, error)
}

type captchaGreeterClient struct {
	cc grpc.ClientConnInterface
}

func NewCaptchaGreeterClient(cc grpc.ClientConnInterface) CaptchaGreeterClient {
	return &captchaGreeterClient{cc}
}

func (c *captchaGreeterClient) Get(ctx context.Context, in *CaptchaGetRequest, opts ...grpc.CallOption) (*CaptchaGetResult, error) {
	out := new(CaptchaGetResult)
	err := c.cc.Invoke(ctx, "/captchaPB.CaptchaGreeter/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captchaGreeterClient) Generate(ctx context.Context, in *CaptchaGenerateRequest, opts ...grpc.CallOption) (*CaptchaGenerateResult, error) {
	out := new(CaptchaGenerateResult)
	err := c.cc.Invoke(ctx, "/captchaPB.CaptchaGreeter/Generate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captchaGreeterClient) Verify(ctx context.Context, in *CaptchaVerifyRequest, opts ...grpc.CallOption) (*StatusResult, error) {
	out := new(StatusResult)
	err := c.cc.Invoke(ctx, "/captchaPB.CaptchaGreeter/Verify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CaptchaGreeterServer is the server API for CaptchaGreeter service.
// All implementations must embed UnimplementedCaptchaGreeterServer
// for forward compatibility
type CaptchaGreeterServer interface {
	Get(context.Context, *CaptchaGetRequest) (*CaptchaGetResult, error)
	Generate(context.Context, *CaptchaGenerateRequest) (*CaptchaGenerateResult, error)
	Verify(context.Context, *CaptchaVerifyRequest) (*StatusResult, error)
	mustEmbedUnimplementedCaptchaGreeterServer()
}

// UnimplementedCaptchaGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedCaptchaGreeterServer struct {
}

func (UnimplementedCaptchaGreeterServer) Get(context.Context, *CaptchaGetRequest) (*CaptchaGetResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCaptchaGreeterServer) Generate(context.Context, *CaptchaGenerateRequest) (*CaptchaGenerateResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Generate not implemented")
}
func (UnimplementedCaptchaGreeterServer) Verify(context.Context, *CaptchaVerifyRequest) (*StatusResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}
func (UnimplementedCaptchaGreeterServer) mustEmbedUnimplementedCaptchaGreeterServer() {}

// UnsafeCaptchaGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CaptchaGreeterServer will
// result in compilation errors.
type UnsafeCaptchaGreeterServer interface {
	mustEmbedUnimplementedCaptchaGreeterServer()
}

func RegisterCaptchaGreeterServer(s grpc.ServiceRegistrar, srv CaptchaGreeterServer) {
	s.RegisterService(&CaptchaGreeter_ServiceDesc, srv)
}

func _CaptchaGreeter_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CaptchaGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptchaGreeterServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/captchaPB.CaptchaGreeter/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptchaGreeterServer).Get(ctx, req.(*CaptchaGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaptchaGreeter_Generate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CaptchaGenerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptchaGreeterServer).Generate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/captchaPB.CaptchaGreeter/Generate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptchaGreeterServer).Generate(ctx, req.(*CaptchaGenerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaptchaGreeter_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CaptchaVerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptchaGreeterServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/captchaPB.CaptchaGreeter/Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptchaGreeterServer).Verify(ctx, req.(*CaptchaVerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CaptchaGreeter_ServiceDesc is the grpc.ServiceDesc for CaptchaGreeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CaptchaGreeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "captchaPB.CaptchaGreeter",
	HandlerType: (*CaptchaGreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _CaptchaGreeter_Get_Handler,
		},
		{
			MethodName: "Generate",
			Handler:    _CaptchaGreeter_Generate_Handler,
		},
		{
			MethodName: "Verify",
			Handler:    _CaptchaGreeter_Verify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "captcha.proto",
}
