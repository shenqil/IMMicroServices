// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: demo.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DemoGreeterClient is the client API for DemoGreeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DemoGreeterClient interface {
	Query(ctx context.Context, in *DemoQueryRequest, opts ...grpc.CallOption) (*DemoQueryResult, error)
	Get(ctx context.Context, in *DemoGetRequest, opts ...grpc.CallOption) (*Demo, error)
	Create(ctx context.Context, in *Demo, opts ...grpc.CallOption) (*IDResult, error)
	Update(ctx context.Context, in *Demo, opts ...grpc.CallOption) (*StatusResult, error)
	Delete(ctx context.Context, in *DemoDeleteRequest, opts ...grpc.CallOption) (*StatusResult, error)
	UpdateStatus(ctx context.Context, in *DemoUpdateStatusRequest, opts ...grpc.CallOption) (*StatusResult, error)
}

type demoGreeterClient struct {
	cc grpc.ClientConnInterface
}

func NewDemoGreeterClient(cc grpc.ClientConnInterface) DemoGreeterClient {
	return &demoGreeterClient{cc}
}

func (c *demoGreeterClient) Query(ctx context.Context, in *DemoQueryRequest, opts ...grpc.CallOption) (*DemoQueryResult, error) {
	out := new(DemoQueryResult)
	err := c.cc.Invoke(ctx, "/demoPB.DemoGreeter/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoGreeterClient) Get(ctx context.Context, in *DemoGetRequest, opts ...grpc.CallOption) (*Demo, error) {
	out := new(Demo)
	err := c.cc.Invoke(ctx, "/demoPB.DemoGreeter/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoGreeterClient) Create(ctx context.Context, in *Demo, opts ...grpc.CallOption) (*IDResult, error) {
	out := new(IDResult)
	err := c.cc.Invoke(ctx, "/demoPB.DemoGreeter/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoGreeterClient) Update(ctx context.Context, in *Demo, opts ...grpc.CallOption) (*StatusResult, error) {
	out := new(StatusResult)
	err := c.cc.Invoke(ctx, "/demoPB.DemoGreeter/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoGreeterClient) Delete(ctx context.Context, in *DemoDeleteRequest, opts ...grpc.CallOption) (*StatusResult, error) {
	out := new(StatusResult)
	err := c.cc.Invoke(ctx, "/demoPB.DemoGreeter/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoGreeterClient) UpdateStatus(ctx context.Context, in *DemoUpdateStatusRequest, opts ...grpc.CallOption) (*StatusResult, error) {
	out := new(StatusResult)
	err := c.cc.Invoke(ctx, "/demoPB.DemoGreeter/UpdateStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DemoGreeterServer is the server API for DemoGreeter service.
// All implementations must embed UnimplementedDemoGreeterServer
// for forward compatibility
type DemoGreeterServer interface {
	Query(context.Context, *DemoQueryRequest) (*DemoQueryResult, error)
	Get(context.Context, *DemoGetRequest) (*Demo, error)
	Create(context.Context, *Demo) (*IDResult, error)
	Update(context.Context, *Demo) (*StatusResult, error)
	Delete(context.Context, *DemoDeleteRequest) (*StatusResult, error)
	UpdateStatus(context.Context, *DemoUpdateStatusRequest) (*StatusResult, error)
	mustEmbedUnimplementedDemoGreeterServer()
}

// UnimplementedDemoGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedDemoGreeterServer struct {
}

func (UnimplementedDemoGreeterServer) Query(context.Context, *DemoQueryRequest) (*DemoQueryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedDemoGreeterServer) Get(context.Context, *DemoGetRequest) (*Demo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDemoGreeterServer) Create(context.Context, *Demo) (*IDResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDemoGreeterServer) Update(context.Context, *Demo) (*StatusResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDemoGreeterServer) Delete(context.Context, *DemoDeleteRequest) (*StatusResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDemoGreeterServer) UpdateStatus(context.Context, *DemoUpdateStatusRequest) (*StatusResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatus not implemented")
}
func (UnimplementedDemoGreeterServer) mustEmbedUnimplementedDemoGreeterServer() {}

// UnsafeDemoGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DemoGreeterServer will
// result in compilation errors.
type UnsafeDemoGreeterServer interface {
	mustEmbedUnimplementedDemoGreeterServer()
}

func RegisterDemoGreeterServer(s grpc.ServiceRegistrar, srv DemoGreeterServer) {
	s.RegisterService(&DemoGreeter_ServiceDesc, srv)
}

func _DemoGreeter_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DemoQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoGreeterServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demoPB.DemoGreeter/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoGreeterServer).Query(ctx, req.(*DemoQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DemoGreeter_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DemoGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoGreeterServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demoPB.DemoGreeter/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoGreeterServer).Get(ctx, req.(*DemoGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DemoGreeter_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Demo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoGreeterServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demoPB.DemoGreeter/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoGreeterServer).Create(ctx, req.(*Demo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DemoGreeter_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Demo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoGreeterServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demoPB.DemoGreeter/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoGreeterServer).Update(ctx, req.(*Demo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DemoGreeter_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DemoDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoGreeterServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demoPB.DemoGreeter/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoGreeterServer).Delete(ctx, req.(*DemoDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DemoGreeter_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DemoUpdateStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoGreeterServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demoPB.DemoGreeter/UpdateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoGreeterServer).UpdateStatus(ctx, req.(*DemoUpdateStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DemoGreeter_ServiceDesc is the grpc.ServiceDesc for DemoGreeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DemoGreeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "demoPB.DemoGreeter",
	HandlerType: (*DemoGreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _DemoGreeter_Query_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _DemoGreeter_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _DemoGreeter_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _DemoGreeter_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DemoGreeter_Delete_Handler,
		},
		{
			MethodName: "UpdateStatus",
			Handler:    _DemoGreeter_UpdateStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "demo.proto",
}
